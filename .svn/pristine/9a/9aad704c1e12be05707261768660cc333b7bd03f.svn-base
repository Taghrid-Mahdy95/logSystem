using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using logs_system.tutorial.EntityClasses;
using logs_system.tutorial.HelperClasses;
using logs_system.tutorial.DatabaseSpecific;
using logs_system.tutorial.Linq;
using SD.LLBLGen.Pro.LinqSupportClasses;
using Microsoft.AspNetCore.Mvc.Rendering;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace razor_demo.Pages.Logs
{
    public class EditEntryModel : PageModel
    {
        [BindProperty] public EntryEntity OldEntry { set; get; }
        [BindProperty] public EntityCollection<ProjectEntity> AllProjects { set; get; }
        [BindProperty] public List<SelectListItem> AllProjectsOptions { set; get; }
        [BindProperty] public string NewSelectedProjectId { set; get; }
        [BindProperty] public ProjectEntity OldSelectedProject { set; get; }
        [BindProperty] public bool OldEntryProject { set; get; }
        public Context EntryContext { set; get; }
        public void OnGet(long Id)
        {
            OldEntry = new EntryEntity(Id);
            using (DataAccessAdapter adapter = new DataAccessAdapter("Database=logsSystem;Server=localhost;Port=5432;User Id=postgres;Password=1234567"))
            {
                EntryContext = new Context();
                adapter.FetchEntity(OldEntry);
                OldEntry = (EntryEntity)EntryContext.Get(OldEntry);

                OldSelectedProject = new ProjectEntity(OldEntry.ProjectId);
                OldEntryProject = adapter.FetchEntity(OldSelectedProject);

                var metaData = new LinqMetaData(adapter);
                AllProjects = metaData.Project.Execute<EntityCollection<ProjectEntity>>();

            }
            AllProjectsOptions = new List<SelectListItem>();
            foreach (ProjectEntity project in AllProjects)
            {
                if ((OldEntryProject == false || OldEntry.ProjectId != project.Id ) && project.Status == true)
                {
                    SelectListItem item = new SelectListItem();
                    item.Value = project.Id.ToString();
                    item.Text = project.Name;
                    AllProjectsOptions.Add(item);
                }
            }

        }
        public RedirectToPageResult OnPost()
        {
            var updatedEntry = new EntryEntity();
            updatedEntry.Id = OldEntry.Id;
            updatedEntry.Description = OldEntry.Description;
            updatedEntry.TimeSpent = OldEntry.TimeSpent;
            updatedEntry.ProjectId = long.Parse(NewSelectedProjectId);
            updatedEntry.IsNew = false;

            using (DataAccessAdapter adapter = new DataAccessAdapter("Database=logsSystem;Server=localhost;Port=5432;User Id=postgres;Password=1234567"))
            {
                adapter.SaveEntity(updatedEntry);
            }
            return RedirectToPage("Logs");
        }
    }
}