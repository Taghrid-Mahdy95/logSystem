using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using logs_system.tutorial.EntityClasses;
using System.ComponentModel.DataAnnotations;
using logs_system.tutorial.DatabaseSpecific;
using logs_system.tutorial.HelperClasses;
using logs_system.tutorial.Linq;
using SD.LLBLGen.Pro.LinqSupportClasses;
using System.Linq;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.Extensions.Configuration;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authentication;


namespace razor_demo.Pages
{
    public class LoginModel : PageModel
    {
        [BindProperty] public string Email { get; set; }
        [BindProperty] public string Password { get; set; }
        [BindProperty] public bool UserNotFound { get; set; }
        public LoginModel()
        {

        }
        public void OnGet()
        {
            UserNotFound = false;
        }
        public async Task<IActionResult> OnPostAsync()
        {
            using (var adapter = new DataAccessAdapter("Database=logsSystem;Server=localhost;Port=5432;User Id=postgres;Password=1234567"))
            {
                var metadata = new LinqMetaData(adapter);
                var q = from us in metadata.User
                        where us.Email == Email && us.Password == Password
                        select us;
                var usercheck = q.Execute<EntityCollection<UserEntity>>();
                if (usercheck.Count != 0)
                {
                    var claims = new List<Claim>
                    {
                        new Claim (ClaimTypes.NameIdentifier,usercheck[0].Id.ToString()),
                        new Claim (ClaimTypes.Name, usercheck[0].Name)
                    };
                    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                    var prinicipal = new ClaimsPrincipal(identity);
                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, prinicipal);

                    return RedirectToPage("Logs/Main");
                }
                else
                {
                    UserNotFound = true;
                    return Page();
                }
            }
        }
    }
}