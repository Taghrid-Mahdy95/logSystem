using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using logs_system.tutorial.EntityClasses;
using System.ComponentModel.DataAnnotations;
using logs_system.tutorial.DatabaseSpecific;
using logs_system.tutorial.HelperClasses;
using logs_system.tutorial.Linq;
using SD.LLBLGen.Pro.LinqSupportClasses;
using System.Linq;
using System.Runtime.Serialization.Json;
using Newtonsoft.Json;

namespace razor_demo.Pages
{
    public class IndexModel : PageModel
    {
        [BindProperty]
        [Required,MinLength(4)]
        public string Name { set; get; }
        
        [PageRemote(ErrorMessage ="Email already exists",
            HttpMethod ="post", PageHandler ="CheckEmail", AdditionalFields = "__RequestVerificationToken")]
        [BindProperty]
        [Required, DataType(DataType.EmailAddress),RegularExpression(@"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|"
            + @"([-a-z0-9!#$%&'*+/=?^_`{|}~]|(?<!\.)\.)*)(?<!\.)"
            + @"@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$")]
        public string Email { set; get; }
        
        [BindProperty]
        [Required,DataType(DataType.Password),StringLength(10,MinimumLength = 4)]
        public string Password { set; get; }
        public UserEntity NewUser { set; get; }
        [BindProperty]
        public EntityCollection<UserEntity> UserCheck { set; get; } 
        public IndexModel()
        {
            NewUser = new UserEntity();
            UserCheck = new EntityCollection<UserEntity>();
        }
        public void OnGet()
        {
        }
        public void Onpost()
        {
            string name = Name;
            NewUser.Name = name;
            string email = Email;
            NewUser.Email = email;
            string password = Password;
            NewUser.Password = password;

            using (var adapter = new DataAccessAdapter("Database=logs_system;Server=localhost;Port=5432;User Id=postgres;Password=1234567"))
            {
               var metaData = new LinqMetaData(adapter);
                var q = from us in metaData.User
                        where us.Password == password && us.Email == email
                        select us;

                UserCheck = q.Execute<EntityCollection<UserEntity>>();
               
                if(UserCheck.Count != 0)
                {
 //                   return RedirectToPage("Index");
                }
                else
                {
                    adapter.SaveEntity(NewUser);
//                    return RedirectToPage("Logs/Main");
                }
            }
        }
        public JsonResult OnPostCheckEmail()
        {
            using (var adapter = new DataAccessAdapter("Database=logs_system;Server=localhost;Port=5432;User Id=postgres;Password=1234567"))
            {
                string password = Password;
                string email = Email;
                var metaData = new LinqMetaData(adapter);
                var q = from us in metaData.User
                        where us.Password == password && us.Email == email
                        select us;
                UserCheck = q.Execute<EntityCollection<UserEntity>>();

                bool valid;
                if (UserCheck.Count != 0)
                {
                    valid = false;
                    string jsonObj = JsonConvert.SerializeObject(valid);
                    return new JsonResult(jsonObj);
                }
                else
                {
                    valid = true;
                    string jsonObject = JsonConvert.SerializeObject(valid);
                    return new JsonResult(jsonObject);
                }
            }
        }
    }
}