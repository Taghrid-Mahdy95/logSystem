using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using SD.LLBLGen.Pro.QuerySpec;
using SD.LLBLGen.Pro.QuerySpec.Adapter;
using SD.LLBLGen.Pro.DQE.PostgreSql;
using SD.LLBLGen.Pro.ORMSupportClasses;
using System.Reflection;
using logs_system.tutorial.EntityClasses;
using Microsoft.AspNetCore.Authentication.Cookies;

namespace razor_demo
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;

            RuntimeConfiguration.AddConnectionString("ConnectionString.PostgreSql (Npgsql)", "Database=logsSystem;Server=localhost;Port=5432;User Id=postgres;Password=1234567");
            RuntimeConfiguration.ConfigureDQE<PostgreSqlDQEConfiguration>(
                c => c
                .SetTraceLevel(System.Diagnostics.TraceLevel.Verbose)
                .AddDbProviderFactory(typeof(Npgsql.NpgsqlFactory)));
            RuntimeConfiguration.SetDependencyInjectionInfo(
                new List<Assembly>()
                        {
                            typeof(EntryEntity).Assembly,
                            this.GetType().Assembly
                        },
                new List<string>()
                        {
                            "logs_system"
                        });
        }
    
        public IConfiguration Configuration { get;}
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages().AddRazorRuntimeCompilation();
            services.AddRazorPages()
    .AddRazorPagesOptions(config =>
    {
        config.Conventions.AuthorizeFolder("/Logs");
        config.Conventions.AllowAnonymousToPage("/Index");
        config.Conventions.AllowAnonymousToPage("/Login");
    });
            services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(o => o.LoginPath = "/Login");
            services.AddHttpContextAccessor();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthentication();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapRazorPages();
            });
        }
    }
}
